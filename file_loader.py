import streamlit as st
import os
import pandas as pd
from PIL import Image, TiffTags
from datetime import datetime
import tempfile

st.set_page_config(
    page_title="Image Info Analyzer",
    page_icon="üñºÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 1rem;
        font-weight: bold;
    }
    .file-table {
        width: 100%;
        border-collapse: collapse;
    }
    .file-table th, .file-table td {
        padding: 8px 12px;
        border: 1px solid #ddd;
        text-align: left;
    }
    .file-table th {
        background-color: #f0f0f0;
        font-weight: bold;
    }
    .file-table tr:hover {
        background-color: #f5f5f5;
    }
    .error-row {
        background-color: #ffe6e6 !important;
    }
</style>
""", unsafe_allow_html=True)

class ImageInfoExtractor:
    def __init__(self):
        self.supported_formats = {'.jpg', '.jpeg', '.gif', '.tif', '.tiff', '.bmp', '.png', '.pcx'}
    
    def get_image_info(self, file_path):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        try:
            with Image.open(file_path) as img:
                file_stats = os.stat(file_path)
                
                info = {
                    'filename': os.path.basename(file_path),
                    'filepath': file_path,
                    'format': img.format or 'Unknown',
                    'width': img.size[0],
                    'height': img.size[1],
                    'size_str': f"{img.size[0]} √ó {img.size[1]}",
                    'mode': img.mode,
                    'color_depth': self.get_color_depth(img),
                    'dpi': self.get_dpi(img),
                    'compression': self.get_compression(img),
                    'file_size_mb': f"{file_stats.st_size / 1024 / 1024:.2f}",
                    'error': None
                }
                return info
        except Exception as e:
            return {
                'filename': os.path.basename(file_path),
                'filepath': file_path,
                'error': str(e),
                'format': 'Error',
                'size_str': 'Error',
                'dpi': 'Error',
                'color_depth': 'Error',
                'compression': 'Error',
                'file_size_mb': 'Error'
            }
    
    def get_color_depth(self, img):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≥–ª—É–±–∏–Ω—É —Ü–≤–µ—Ç–∞"""
        mode_bits = {
            '1': 1, 'L': 8, 'P': 8, 'RGB': 24, 'RGBA': 32,
            'CMYK': 32, 'YCbCr': 24, 'LAB': 24, 'HSV': 24, 'I': 32, 'F': 32
        }
        return mode_bits.get(img.mode, f"Unknown ({img.mode})")
    
    def get_dpi(self, img):
        dpi = img.info.get('dpi', (72, 72))
        if isinstance(dpi, tuple) and len(dpi) == 2:
            return f"{dpi[0]} √ó {dpi[1]}"
        return "72 √ó 72"
    
    def get_compression(self, img):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∂–∞—Ç–∏–∏"""
        compression = img.info.get('compression', 'None')
        compression_map = {
            'jpeg': 'JPEG', 'deflate': 'DEFLATE', 'packbits': 'PackBits',
            'lzw': 'LZW', 'none': 'None', 'raw': 'RAW', 'tiff_lzw': 'TIFF LZW'
        }
        return compression_map.get(str(compression).lower(), str(compression).capitalize())

def scan_folder(folder_path):
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É –∏ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    image_files = []
    
    for root, dirs, files in os.walk(folder_path):
        for file in files:
            if os.path.splitext(file)[1].lower() in {'.jpg', '.jpeg', '.gif', '.tif', '.tiff', '.bmp', '.png', '.pcx'}:
                image_files.append(os.path.join(root, file))
        

        if len(image_files) >= 100000:
            break
    
    return image_files[:100000] 

def main():
    st.markdown('<div class="main-header">üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤</div>', unsafe_allow_html=True)
    
    if 'extractor' not in st.session_state:
        st.session_state.extractor = ImageInfoExtractor()
    
    if 'processed_files' not in st.session_state:
        st.session_state.processed_files = []
    
    if 'folder_path' not in st.session_state:
        st.session_state.folder_path = ""
 
    with st.sidebar:
        st.header("üìÅ –í—ã–±–æ—Ä –ø–∞–ø–∫–∏")
        
        folder_path = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ:",
            value=st.session_state.folder_path,
            placeholder="C:/Users/Name/Pictures –∏–ª–∏ /home/user/images"
        )
        
        if st.button("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ø–∫—É", type="primary"):
            if folder_path and os.path.exists(folder_path):
                st.session_state.folder_path = folder_path
                scan_and_process_folder(folder_path)
            else:
                st.error("‚ùå –£–∫–∞–∑–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        
        st.markdown("---")
        st.info("""
        **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
        - JPEG, GIF, TIFF, BMP, PNG, PCX
        
        **–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
        - –ò–º—è —Ñ–∞–π–ª–∞, —Ä–∞–∑–º–µ—Ä, —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        - –ì–ª—É–±–∏–Ω–∞ —Ü–≤–µ—Ç–∞, —Ç–∏–ø —Å–∂–∞—Ç–∏—è
        """)

    if st.session_state.processed_files:
        display_results()
    else:
        show_welcome()

def scan_and_process_folder(folder_path):
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É"""
    with st.spinner("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏..."):
        image_files = scan_folder(folder_path)
        
        if not image_files:
            st.error("‚ùå –í —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!")
            return
        
        st.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(image_files)}")
        
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        processed_data = []
        
        for i, file_path in enumerate(image_files):
            progress = (i + 1) / len(image_files)
            progress_bar.progress(progress)
            status_text.text(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ {i+1}/{len(image_files)}: {os.path.basename(file_path)}")
            info = st.session_state.extractor.get_image_info(file_path)
            processed_data.append(info)
        
        progress_bar.empty()
        status_text.text(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(processed_data)}")
        
        st.session_state.processed_files = processed_data

def display_results():
    data = st.session_state.processed_files

    total_files = len(data)
    successful = len([f for f in data if not f.get('error')])
    error_count = total_files - successful
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤", total_files)
    with col2:
        st.metric("‚úÖ –£—Å–ø–µ—à–Ω–æ", successful)
    with col3:
        st.metric("‚ùå –û—à–∏–±–∫–∏", error_count)

    search_term = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞:", placeholder="–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞...")
    
    filtered_data = data
    if search_term:
        filtered_data = [f for f in data if search_term.lower() in f['filename'].lower()]

    display_data = []
    for file_info in filtered_data:
        display_data.append({
            '–§–∞–π–ª': file_info['filename'],
            '–†–∞–∑–º–µ—Ä (–ø–∏–∫—Å–µ–ª–∏)': file_info['size_str'],
            '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ (DPI)': file_info['dpi'],
            '–ì–ª—É–±–∏–Ω–∞ —Ü–≤–µ—Ç–∞': file_info['color_depth'],
            '–°–∂–∞—Ç–∏–µ': file_info['compression'],
            '–§–æ—Ä–º–∞—Ç': file_info['format'],
            '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (MB)': file_info['file_size_mb'],
            '–°—Ç–∞—Ç—É—Å': '‚ùå –û—à–∏–±–∫–∞' if file_info.get('error') else '‚úÖ OK'
        })
    
    if display_data:
        df = pd.DataFrame(display_data)
 
        def color_rows(row):
            if row['–°—Ç–∞—Ç—É—Å'] == '‚ùå –û—à–∏–±–∫–∞':
                return ['background-color: #ffe6e6'] * len(row)
            return [''] * len(row)
        
        styled_df = df.style.apply(color_rows, axis=1)
        
        st.dataframe(
            styled_df,
            use_container_width=True,
            height=600
        )
        
        csv = df.to_csv(index=False, encoding='utf-8-sig')
        st.download_button(
            label="üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV",
            data=csv,
            file_name=f"image_info_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv"
        )
    else:
        st.warning("üì≠ –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def show_welcome():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω"""
    st.markdown("""
    ## üéØ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    
    –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–∑ –Ω–∏—Ö –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    
    ### üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    - **JPEG/JPG** - —Ñ–æ—Ä–º–∞—Ç —Å–∂–∞—Ç–∏—è —Å –ø–æ—Ç–µ—Ä—è–º–∏
    - **GIF** - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –∏ –ø–∞–ª–∏—Ç—Ä—É
    - **TIFF** - –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —Ç–µ–≥–∞–º–∏
    - **BMP** - –Ω–µ—Å–∂–∞—Ç—ã–π —Ñ–æ—Ä–º–∞—Ç Windows
    - **PNG** - —Å–∂–∞—Ç–∏–µ –±–µ–∑ –ø–æ—Ç–µ—Ä—å —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
    - **PCX** - —Ñ–æ—Ä–º–∞—Ç ZSoft Paintbrush
    
    ### üîç –ò–∑–≤–ª–µ–∫–∞–µ–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
    - **–ò–º—è —Ñ–∞–π–ª–∞** - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    - **–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è** - —à–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    - **–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ** - –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–æ—á–µ–∫ –Ω–∞ –¥—é–π–º (DPI)
    - **–ì–ª—É–±–∏–Ω–∞ —Ü–≤–µ—Ç–∞** - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏—Ç –Ω–∞ –ø–∏–∫—Å–µ–ª—å
    - **–¢–∏–ø —Å–∂–∞—Ç–∏—è** - –∞–ª–≥–æ—Ä–∏—Ç–º —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    ### üöÄ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
    1. –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ø–∫—É"
    3. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ
    4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
    
    ### üí° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - ‚ö° –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—ã—Å—è—á —Ñ–∞–π–ª–æ–≤
    - üìä –£–¥–æ–±–Ω–æ–µ —Ç–∞–±–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    - üîç –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV
    """)

if __name__ == "__main__":
    main()